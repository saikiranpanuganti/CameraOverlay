//
//  RecordingViewController.swift
//  CameraOverLayProj
//
//  Created by Saikiran Panuganti on 24/02/23.
//

import UIKit

import AVFoundation

public enum CameraPosition {
    case front
    case rear
}

class RecordingViewController: UIViewController {
    
    @IBOutlet fileprivate var captureButton: UIButton!
    
    ///Displays a preview of the video output generated by the device's cameras.
    @IBOutlet fileprivate var capturePreviewView: UIView!
    
    ///Allows the user to put the camera in photo mode.
    @IBOutlet fileprivate var photoModeButton: UIButton!
    @IBOutlet fileprivate var toggleCameraButton: UIButton!
    @IBOutlet fileprivate var toggleFlashButton: UIButton!
    
    ///Allows the user to put the camera in video mode.
    @IBOutlet fileprivate var videoModeButton: UIButton!
    
    var captureView: CaptureView!
    var captureSession: AVCaptureSession!
    var frontCamera: AVCaptureDevice?
    var rearCamera: AVCaptureDevice?
    var frontCameraInput: AVCaptureInput?
    var rearCameraInput: AVCaptureInput?
    var currentCameraPosition: CameraPosition?
    var audioDevice: AVCaptureDevice?
    var audioInput: AVCaptureInput?
    var videoOutput: AVCaptureFileOutput?
    
    var cameraFrame = CGRect.zero
    
    let cameraController = CameraController()

    override func viewDidLoad() {
        super.viewDidLoad()
        
        styleCaptureButton()
        configureCameraController()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
//        setUpCaptureView()
        
        
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
    }
    
    func setUpCaptureView() {
        self.view.backgroundColor = UIColor.clear
        let viewWidth = self.view.frame.width
    
        // Set required values here for Camera frame
        let cameraFrameWidth = 300.0
        let cameraFrameHeight = 200.0
        let cameraYPosition = 150.0
        
        cameraFrame = CGRect(x: (viewWidth - cameraFrameWidth)/2, y: cameraYPosition, width: cameraFrameWidth, height: cameraFrameHeight)
        
        captureView = CaptureView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
        captureView.cameraFrame = cameraFrame
        self.view.addSubview(captureView)
    }
    
    func styleCaptureButton() {
        captureButton.layer.borderColor = UIColor.black.cgColor
        captureButton.layer.borderWidth = 2
        
        captureButton.layer.cornerRadius = min(captureButton.frame.width, captureButton.frame.height) / 2
    }
    
    func configureCameraController() {
        cameraController.prepare {(error) in
            if let error = error {
                print(error)
            }
            
            try? self.cameraController.displayPreview(on: self.view)
        }
    }
    
    @IBAction func toggleFlash(_ sender: UIButton) {
        if cameraController.flashMode == .on {
            cameraController.flashMode = .off
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash Off Icon"), for: .normal)
        }
            
        else {
            cameraController.flashMode = .on
            toggleFlashButton.setImage(#imageLiteral(resourceName: "Flash On Icon"), for: .normal)
        }
    }
    
    @IBAction func switchCameras(_ sender: UIButton) {
        do {
            try cameraController.switchCameras()
        }
            
        catch {
            print(error)
        }
        
        switch cameraController.currentCameraPosition {
        case .some(.front):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Front Camera Icon"), for: .normal)
            
        case .some(.rear):
            toggleCameraButton.setImage(#imageLiteral(resourceName: "Rear Camera Icon"), for: .normal)
            
        case .none:
            return
        }
    }
    
    @IBAction func captureImage(_ sender: UIButton) {
//        cameraController.captureImage {(image, error) in
//            guard let image = image else {
//                print(error ?? "Image capture error")
//                return
//            }
//
//            try? PHPhotoLibrary.shared().performChangesAndWait {
//                PHAssetChangeRequest.creationRequestForAsset(from: image)
//            }
//        }
    }
}


